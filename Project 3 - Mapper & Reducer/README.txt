README
1.
Structs were formed called "Node", "List", "Worker", and "Message". The Node struct was used to store words, counts, and pointers for use in the bounded buffer. The List struct was used for both those bounded buffers and for handling the threads that would need to be joined. Each of the worker threads were created such that a Node would be created with their id value stored in the count parameter, with a temp character array passed for creation. This allowed the Nodes representing the threads to be stored in a list that was then used to systematically join all of them once finished. The Worker struct was used to pass filename and buffer information to each of the worker threads. The final Message struct was used to transfer word and count information from Node structs inside of the bounded buffers to a format that could be passed to the message queue by the sender threads.
2.
The project was mostly implemented as described in the project description, semaphores, forking, multithreading, bounded buffers, and a message queue were all used. The only possible slight change was that only the word was taken by the reducer from the message queue, as each of the counts would always be 1. As it took the word from each message, the reducer program assumed a count of 1 and then handled total counts appropriatly.
3.
The messages themselves comprised of a long value called count and a character array of "MAXWORDSIZE" size called word. The message was malloced to be the size of the message struct itself, to ensure that the necessary space was always allocated.
